//
// Generated file, do not edit! Created by opp_msgtool 6.1 from inet/routing/fsr/FsrPacket.msg.
//

#ifndef __INET_FSRPACKET_M_H
#define __INET_FSRPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

struct LinkStateEntry;
class FsrPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Struct generated from inet/routing/fsr/FsrPacket.msg:9 by opp_msgtool.
 */
struct INET_API LinkStateEntry
{
    LinkStateEntry();
    Ipv4Address destAddress;
    uint32_t sequenceNumber = 0;
    uint8_t neighborsStartIndex = 0;
    uint8_t neighborsSize = 0;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const LinkStateEntry& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, LinkStateEntry& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LinkStateEntry& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LinkStateEntry& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>inet/routing/fsr/FsrPacket.msg:16</tt> by opp_msgtool.
 * <pre>
 * class FsrPacket extends FieldsChunk
 * {
 *     LinkStateEntry links[];
 *     Ipv4Address neighborsList[];
 * }
 * </pre>
 */
class INET_API FsrPacket : public ::inet::FieldsChunk
{
  protected:
    LinkStateEntry *links = nullptr;
    size_t links_arraysize = 0;
    Ipv4Address *neighborsList = nullptr;
    size_t neighborsList_arraysize = 0;

  private:
    void copy(const FsrPacket& other);

  protected:
    bool operator==(const FsrPacket&) = delete;

  public:
    FsrPacket();
    FsrPacket(const FsrPacket& other);
    virtual ~FsrPacket();
    FsrPacket& operator=(const FsrPacket& other);
    virtual FsrPacket *dup() const override {return new FsrPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setLinksArraySize(size_t size);
    virtual size_t getLinksArraySize() const;
    virtual const LinkStateEntry& getLinks(size_t k) const;
    virtual LinkStateEntry& getLinksForUpdate(size_t k) { handleChange();return const_cast<LinkStateEntry&>(const_cast<FsrPacket*>(this)->getLinks(k));}
    virtual void setLinks(size_t k, const LinkStateEntry& links);
    virtual void insertLinks(size_t k, const LinkStateEntry& links);
    [[deprecated]] void insertLinks(const LinkStateEntry& links) {appendLinks(links);}
    virtual void appendLinks(const LinkStateEntry& links);
    virtual void eraseLinks(size_t k);

    virtual void setNeighborsListArraySize(size_t size);
    virtual size_t getNeighborsListArraySize() const;
    virtual const Ipv4Address& getNeighborsList(size_t k) const;
    virtual Ipv4Address& getNeighborsListForUpdate(size_t k) { handleChange();return const_cast<Ipv4Address&>(const_cast<FsrPacket*>(this)->getNeighborsList(k));}
    virtual void setNeighborsList(size_t k, const Ipv4Address& neighborsList);
    virtual void insertNeighborsList(size_t k, const Ipv4Address& neighborsList);
    [[deprecated]] void insertNeighborsList(const Ipv4Address& neighborsList) {appendNeighborsList(neighborsList);}
    virtual void appendNeighborsList(const Ipv4Address& neighborsList);
    virtual void eraseNeighborsList(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FsrPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FsrPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::LinkStateEntry *p) {return any_ptr(p);}
template<> inline inet::LinkStateEntry *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::LinkStateEntry>(); }
template<> inline inet::FsrPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::FsrPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_FSRPACKET_M_H

